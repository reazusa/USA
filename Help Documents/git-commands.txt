==========================================================================
Usecase:
There are cases when committing with a different user to a different Git repository is needed. Git offers a very easy command to change user.email and user.name, as long as you remember to do so.

	$ git config user.name "Firstname Lastname"
	$ git config user.email "Firstname.LastnameDoe@somemailhost.com"

Git also offers a command to globally change user.name and user.email and this is valid for each and every repository that is cloned. If the use case is to work with one name and email only, then maybe this is the best option.

Configure Your Name & Email:
	$ git config --global user.name "Your Name"
	$ git config --global user.email "your@email.com"
==========================================================================	
Initialize git:
	$ git init

Show all folders (including hidden ones):
	$ ls -a

Check Status:
	$ git status
	
Creat New File:
	$ touch index.html

Create New Directory:
	$ mkdir <directoryNameName>

Add file to staging area:
	$ git add index.html
	$ git add <directoryName>

Making Commits:
	$ git commit -m "Commit message"
	
Checking history and other logs of commits:
	$git log

Add multiple files:
	$ git add index.html app.js
		--- After adding these files, again need to commit.
Add multiple (all) changes:
	$ git add .				==> 	(it means - git add everything)

	


Branch:
	Switch to a branch:
		$ git checkout <branchname>
		$ git switch <branchname>
		
		==> Create and switch to a new branch:
		$ git checkout -b <branchname>
		
		==> Show branches:
		$ git branch 
			Note: current working branch will be marked with asterisk (*).
		
		
		==> Create branch:
		
Push an existing repository from the command line:
==> For pushing codes to the repository, it is not enough just to create remote; we need to push our our code to the remote also.
	$ git remote add origin https://github.com/reazusa/USA-Projects-W3Resource.git
	$ git push -u origin master
	$ git push -u origin master main development stagin testing
		=> Together we can push our code to multiple branches too.
		*** 'origin' is the name or label for the remote.
			* If there is no name, we use 'origin' to set a name for remote.
			* 'origin' is pretty standard conventional name.
			* we can name it as "myGitHub" or "randomPlaceOnline"; it doesn't matter.
			
Giving permission to other collaborators for changing:
	Settings -> Manage access -> Click on "Invite a collaborator" button -> Type the user name or email of the collaborator -> Click on "Select a collaborator above" button.
	

Git Pull:
	*** First of all, check that you do not have any uncommitted changes.
	$ git pull origin development
		- here 'development' is the branch where changes have been made.
		- here origin is the url.
		